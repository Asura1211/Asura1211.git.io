<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山の博客</title>
  <icon>https://www.gravatar.com/avatar/d6b4ccc75d3b05793059f7fa33d47f22</icon>
  <subtitle>青山の博客</subtitle>
  <link href="https://asura1211.github.io/atom.xml" rel="self"/>
  
  <link href="https://asura1211.github.io/"/>
  <updated>2022-03-09T08:00:57.500Z</updated>
  <id>https://asura1211.github.io/</id>
  
  <author>
    <name>青山</name>
    <email>lvchangjing_hit@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【持续输出】— —记一次 babel 编译插件的修复过程</title>
    <link href="https://asura1211.github.io/2022/03/08/%E3%80%90%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%E3%80%91%E2%80%94%20%E2%80%94%20%E8%AE%B0%E4%B8%80%E6%AC%A1%20babel%20%E7%BC%96%E8%AF%91%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BF%AE%E5%A4%8D%E8%BF%87%E7%A8%8B/"/>
    <id>https://asura1211.github.io/2022/03/08/%E3%80%90%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%E3%80%91%E2%80%94%20%E2%80%94%20%E8%AE%B0%E4%B8%80%E6%AC%A1%20babel%20%E7%BC%96%E8%AF%91%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BF%AE%E5%A4%8D%E8%BF%87%E7%A8%8B/</id>
    <published>2022-03-08T15:35:30.000Z</published>
    <updated>2022-03-09T08:00:57.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章是作者在阿里实习时对该 babel 编译插件的修复过程记录。babel 插件地址：<a href="https://github.com/jsx-plus/babel-plugin-transform-jsx-condition">https://github.com/jsx-plus/babel-plugin-transform-jsx-condition</a></p><h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p><strong>使用 jsx-plus 的条件渲染时，若相邻节点间存在注释节点，则条件渲染失效</strong>。</p><p>BUG 复现如下：（右上方为实际的输出）</p><ul><li>x-if 值为真时，x-else 控制的节点也渲染。</li></ul><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516759-2a55f7f2-00ad-4a0c-847e-78c0243558e0.png" alt="img" style="zoom: 67%;" /><ul><li>无论 x-if 的值为真假，x-elseif 和 x-else 控制的节点都将渲染。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516774-dfd78c08-771d-4f56-82b9-8828fe15ffe5.png" alt="img" style="zoom: 50%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516874-691a3a93-1cc0-4203-8a9c-0bbaabf353d2.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516774-dfd78c08-771d-4f56-82b9-8828fe15ffe5.png" alt="img" style="zoom: 50%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516874-691a3a93-1cc0-4203-8a9c-0bbaabf353d2.png" alt="img"></p><ul><li>所有节点均渲染在页面上。</li></ul><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383516963-db87eb7f-c763-4009-9dd9-9100935d7764.png" alt="img" style="zoom:67%;" /><p>同时，在一个月前的 CR 中，师兄也指出了这个问题。</p><p>对照 Vue 的 v-if、v-else-if、v-else，虽然<a href="https://v3.cn.vuejs.org/guide/conditional.html#v-if"> Vue 官方文档</a>并没有说明条件渲染的节点间能否存在注释，但经测试是可以的。</p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383517994-a533653c-a9a5-49f8-81e9-f03622d8ff0a.png" alt="img" style="zoom:50%;" /><p>这个 bug 的存在对实际编码影响还是蛮大的，因此借这个机会，在师兄的鼓励下自己开始探索如何修复这个问题。</p><h1 id="二、遇到的麻烦-amp-解决方案"><a href="#二、遇到的麻烦-amp-解决方案" class="headerlink" title="二、遇到的麻烦 &amp; 解决方案"></a>二、遇到的麻烦 &amp; 解决方案</h1><h2 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h2><p>打开项目<a href="https://github.com/jsx-plus/babel-plugin-transform-jsx-condition/blob/master/src/index.js">（仓库地址）</a>后对着这百来行代码，不知道该从何开始看起。简单看了一遍后没有厘清大致思路，无法理解那些“找不到定义”的函数。</p><ul><li>在师兄的指导和帮助下，意识到自己应该先从 <a href="https://babeljs.io/">babel 官网</a>看起，学习最简单的 babel 插件和原理，同时再了解一下  AST 语法树的知识。</li><li>同时自己也参考了 <a href="https://github.com/facebook/jsx">facebook 的 jsx 规范</a>（介绍了 jsx 语法的 AST 结构）、<a href="https://astexplorer.net/">AST Explorer</a>（实时查看代码的 AST 结构）、babel 的 <a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md#stopping-traversal">github 文档</a>（介绍了编写插件的基础知识）、<a href="https://github.com/babel/babel">babel 源码</a>（查看一些 API 的功能）等，最后终于能看懂并理解原代码的逻辑。</li><li>到最后其实发现先前自己看不懂作用的那些函数，基本都是 babel 实现的将 jsx 语法转换为标准的 ECMAScript 脚本语言规范的相关函数，阅读代码的时候完全可以由函数名大致猜测其目的。</li></ul><h2 id="如何调试"><a href="#如何调试" class="headerlink" title="如何调试"></a>如何调试</h2><p>与平时的业务代码不同，在插件中 <code>console.log</code> 并不能看到想打印的东西。</p><ul><li><p>师兄指导可以以<strong>软链接</strong>的方式将该插件模块链接到本地项目，从而进行实时的调试和测试。</p></li><li><ul><li>在执行 <code>tnpm link</code> 命令后，该插件就会根据 package.json 上的配置，被链接到全局。<img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383518323-70c5aca8-cfd6-43cd-b85c-97847d379e20.png" alt="img"></li><li>然后再进入本地测试的项目，执行 <code>tnpm link xxx（本地模块路径）</code> ，该插件就会被链接到项目的 node_modules 中。<img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383518542-8f80a02b-a257-43e5-a935-f7f50c65af55.png" alt="img"></li><li>于是就可以在项目运行的时候看到想要的输出，开始愉快的 debug~<img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383518726-ae7f140b-cc66-4d56-a561-f2080f315d58.png" alt="img"></li></ul></li><li><p>但事实上，在最初建立测试项目时，遇到了很多曲折：</p></li><li><ul><li>先后尝试使用 jsx-plus 官方的 <a href="https://github.com/jsx-plus/jsxplus-example-react">example</a> 和 <code>create-react-app</code> 新建项目，然而当项目运行时，能在控制台看到打印的东西，却很快又会被清屏。后来猜测可能是由于 webpack 编译时自动引入了 react-dev-utils 中的 clearConsole 函数，导致清屏，但是禁用后仍存在问题。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383518977-c7ae86fd-16aa-4252-88cc-0eab76c07c65.png" alt="img"></li><li>最后通过 <a href="https://npm.alibaba-inc.com/package/@alife/cone-cli/v/0.1.13">@alife/cone-cli</a> 这个 CLI 搭建了一个简易版 demo，在该项目中进行的调试。</li><li>为了方便以后开发，需要在电脑上自己手动搭建一个只有  webpack + react 的最简化项目环境。</li></ul></li></ul><h2 id="如何提高调试效率"><a href="#如何提高调试效率" class="headerlink" title="如何提高调试效率"></a>如何提高调试效率</h2><p>这种情况下进行实时 debug 比较麻烦，两类项目修改完后需要分别编译运行，调试效率比较低。针对两端分别解决：</p><ul><li>插件端：通过启用 webpack 的 watch 模式，监听文件变化，使得代码修改后实时编译。<img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383519282-4f493487-2321-4f5e-986a-a6789687020d.png" alt="img"></li><li>项目端：由于 Node 模块分为原生模块和文件模块，且模块间优先级不同（文件模块缓存&gt;原生模块&gt;文件模块），在加载时会优先从文件模块的<strong>缓存</strong>中加载已经存在的模块。当我们更改本地插件模块的代码后，再次 require 会命中缓存，因此需要重启项目，重新加载文件模块。</li></ul><p>解决方案：基于 node.js 的热更新（参考<a href="https://github.com/airuikun/node-reload%EF%BC%89%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%B8%85%E9%99%A4">https://github.com/airuikun/node-reload），可以通过清除</a> <code>require.cache</code>上对应模块路径的缓存引用地址，并自动 reload，达到类似热更新的效果，提高开发效率。这里其实还可以开发一个专门用来删缓存的工具，给这种场景提效。</p><h1 id="三、问题定位-amp-解决"><a href="#三、问题定位-amp-解决" class="headerlink" title="三、问题定位 &amp; 解决"></a>三、问题定位 &amp; 解决</h1><p>该 babel 编译插件的核心逻辑是：在检测到 x-if 节点后，<strong>会遍历寻找其他节点</strong>（ AST 类型为 JSXElement 且 condition 为 elseif 或 else），<strong>将它们的 condition 添加到 conditions 列表</strong>中，从而控制这些节点的渲染。</p><p>但是在这个循环逻辑中可以看到：原代码只对空文本节点进行了判断处理，并没有对注释节点（AST 类型为 JSXExpressionContainer，且其表达式类型为 JSXEmptyExpression）作处理。</p><p>这就导致当遇到注释节点时，程序终止遍历，后续需要条件渲染的节点 的 condition 不会被添加到 conditions 列表，条件渲染失效。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383520318-e7573c62-457c-4207-8c5d-73f8c5b96049.png" alt="img"></p><p>事实上，当遇到空文本节点或者注释节点时，都应该继续遍历，寻找 x-elseif 或者 x-else 控制的节点。在原代码基础上补充一个判断条件，得以解决：<img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383520640-4793c980-98cc-40dc-80ec-890ef2a13724.png" alt="img"></p><h2 id="一个小插曲"><a href="#一个小插曲" class="headerlink" title="一个小插曲"></a>一个小插曲</h2><p>在刚定位到问题时，自己先入为主地将注释节点默认为 JSXExpressionContainer 类型的节点。于是只增加了这一行代码：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383520897-cf12662a-f28a-4e93-90d3-400526e15215.png" alt="img"></p><p>但顾名思义， JSXExpressionContainer 只是一个容器，任何以 “{}” 包裹的内容都会被解析为 JSXExpressionContainer 节点。事实上，JSXEmptyExpression 才是注释节点， <a href="https://github.com/facebook/jsx/blob/main/AST.md">facebook 的 jsx 规范</a>中解释如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383520807-781b646e-587b-495d-9258-a41df65c9ec9.png" alt="img"></p><p>这就导致当存在一个 renderBlock 函数，返回若干个 DOM 节点时（在实际业务开发中经常用到，如返回一个标签列表），该 babel 插件会将它也认为是一个注释节点，因此 x-elseif、x-else 控制的节点仍然会进行条件渲染，与预期不符。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383521812-46263ecf-adbf-4fde-afc6-745745729b1f.png" alt="img" style="zoom: 80%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383522062-6a1fc00e-229d-4625-8120-0ab28c5ddda8.png" alt="img"></p><p>分析一下这段 DOM 的 AST 结构，如下所示（由 <a href="https://astexplorer.net/">https://astexplorer.net/</a> 得到）：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383522631-92274954-d2e7-4e29-aa93-7a6f728a7a8f.png" alt="img"></p><p>因此，在判断是否是注释节点时，除了要保证节点是 JSXExpressionContainer 类型的，还要求内容是注释，而不是其他如函数表达式等。</p><h1 id="四、单元测试验证"><a href="#四、单元测试验证" class="headerlink" title="四、单元测试验证"></a>四、单元测试验证</h1><p>原先的单测覆盖的情况比较少，并没有考虑到注释节点：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383522830-c6d50de5-058d-49af-8439-3ffc157e58b1.png" alt="img"></p><p>对修改前后的代码进行单元测试验证，结果如下所示：</p><ul><li>对于注释节点：</li></ul><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383522841-a6695f13-cae9-409a-9182-e0b4cdaaccc9.png" alt="img" style="zoom: 80%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383523098-62d54496-aa86-4e59-8ba6-55a2a8c358e1.png" alt="img" style="zoom:67%;" /><p>可以看到，x-elseif、x-else 的节点都不受 condition 的约束，即不管 x-if 为何，都将渲染在页面上。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383523231-11c635fe-8d62-4cb9-8b32-47b0af31705a.png" alt="img">每个 AST 节点有各自的 condition，符合预期。</p><ul><li>对于函数节点：</li></ul><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524105-e0be1f37-644b-44f9-8625-940e3ce9661d.png" alt="img" style="zoom: 80%;" /><p>若把函数节点视为注释节点，通过该插件转换的代码：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524199-3e1cf6fe-dbf0-42f3-b323-d8d92573409e.png" alt="img">可以看到，x-elseif、x-else 的节点此时受 condition 的约束。但是实际上由于该函数节点可能会返回若干个 DOM 元素，从而打乱原有的 if 逻辑。因此期望的结果应该是 x-elseif、x-else 的节点不受控制，都渲染在页面上。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524325-cf3cb970-deec-4036-8f50-14c4263e99c1.png" alt="img"></p><h1 id="五、（待）完善"><a href="#五、（待）完善" class="headerlink" title="五、（待）完善"></a>五、（待）完善</h1><ul><li>由于循环判断中的逻辑比较复杂，因此将判断逻辑封装成函数，更易理解。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524526-873bc9c0-5563-4a35-89ac-58c37374bc33.png" alt="img" style="zoom:67%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524886-adf6a13c-6a92-47b7-96e5-f55b9c98f6f8.png" alt="img"><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524526-873bc9c0-5563-4a35-89ac-58c37374bc33.png" alt="img" style="zoom:67%;" /><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383524886-adf6a13c-6a92-47b7-96e5-f55b9c98f6f8.png" alt="img"></p><ul><li>在检测到用户错误的用法时，现在的机制是直接呈现“错误”的结果，隐式地告诉用户这样写是错误的。参考 Vue，当检测到错误语法，会在编译时直接抛出 error ，并详细标明错误位置和原因。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/21379484/1646383525757-d7891fb6-0bba-46d2-be17-202091fba6da.png" alt="img"></p><p>在师兄的建议下，未来需要给插件加入报错机制，优化用户体验。（借助这个库：<a href="https://web.npm.alibaba-inc.com/package/chalk%EF%BC%89">https://web.npm.alibaba-inc.com/package/chalk）</a></p><h1 id="六、思考-amp-感悟"><a href="#六、思考-amp-感悟" class="headerlink" title="六、思考 &amp; 感悟"></a>六、思考 &amp; 感悟</h1><ol><li>第一次接触这样的代码，显得手足无措，导致解决周期历经很久。整个过程中发现自己的观察和联想的能力远远不够，比如遇到陌生的 API ，明显通过名字就可以推测出大致意思，自己却仍想看清楚它的具体实现，找不到就被卡住。</li><li>以后若是需要写一些功能型的插件，自测和单测用例应尽可能覆盖全面（如上面遇到的这个小插曲，是自己自测完功能无误，向师兄演示时他直接举的例子，精准地找到欠缺点），包括在日常开发中，要培养自己对各种边界条件的敏感度。</li><li>通过 <code>create-react-app</code> 创建的项目很方便进行业务上的开发，但是正由于其配置了比较全面的 webpack，导致其不便于像现在这样对某个插件进行开发调试。为了方便以后开发，需要在电脑上自己手动搭建一个只有  webpack + react 的最简化项目环境。</li><li>这次经历仿佛为自己打开了一扇新的大门，从之前在学校做的实际项目，到实习时参与的分享购物车，现在又接触了比较底层的 babel 编译插件。自己对“前端”这一名词明显有了进一步认识，当然，还有更广阔的领域等待自己探索。我认为这是自己实习过程中很重要的收获之一，自己也会继续深入学习 babel 相关知识，争取围绕 babel 和阿里内部的一些库或框架进行下一次分享。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本篇文章是作者在阿里实习时对该 babel 编译插件的修复过程记录。babel 插件地址：&lt;a href=&quot;https://github.c</summary>
      
    
    
    
    <category term="持续输出" scheme="https://asura1211.github.io/categories/%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>React</title>
    <link href="https://asura1211.github.io/2021/12/14/React/"/>
    <id>https://asura1211.github.io/2021/12/14/React/</id>
    <published>2021-12-14T21:29:39.000Z</published>
    <updated>2021-12-15T13:32:56.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React特点"><a href="#React特点" class="headerlink" title="React特点"></a>React特点</h2><p>采用<strong>组件化模式</strong>、<strong>声明式编码</strong>，提高开发效率及组件复用率。</p><p>在 React Native 中可以使用 React 语法进行<strong>移动端开发</strong>。</p><p>使用虚拟 DOM + 优秀的 Diffing 算法，尽量减少与真实 DOM 的交互。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;React特点&quot;&gt;&lt;a href=&quot;#React特点&quot; class=&quot;headerlink&quot; title=&quot;React特点&quot;&gt;&lt;/a&gt;React特点&lt;/h2&gt;&lt;p&gt;采用&lt;strong&gt;组件化模式&lt;/strong&gt;、&lt;strong&gt;声明式编码&lt;/strong&gt;，提高</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>【持续输出】— — 关于全景实现的思考</title>
    <link href="https://asura1211.github.io/2021/12/14/%E3%80%90%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%E3%80%91%E2%80%94%20%E2%80%94%20%E5%85%B3%E4%BA%8E%E5%85%A8%E6%99%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>https://asura1211.github.io/2021/12/14/%E3%80%90%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%E3%80%91%E2%80%94%20%E2%80%94%20%E5%85%B3%E4%BA%8E%E5%85%A8%E6%99%AF%E5%AE%9E%E7%8E%B0%E7%9A%84%E6%80%9D%E8%80%83/</id>
    <published>2021-12-14T15:22:36.000Z</published>
    <updated>2021-12-15T09:01:17.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>十分幸运，在微信一面面试官老师的指导下，我对自己<a href="https://www.hitlcj.top/2021/07/13/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98%E3%80%91%E2%80%94%20%E2%80%94%20%E5%9F%BA%E4%BA%8Epannellum%E7%9A%84%E5%85%A8%E6%99%AF%E5%AE%9E%E7%8E%B0/">之前的项目</a>做了一个深入的思考和原理分析，最后整理成了这篇文章。第一次输出文章可能不是很规范，日积月累加油吧！</p></blockquote><h1 id="Pannellum-实现"><a href="#Pannellum-实现" class="headerlink" title="Pannellum 实现"></a>Pannellum 实现</h1><p>这个VR看房的项目是使用 Vue + Pannellum 实现的。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Pannellum 是一个轻量级的 Web 全景图片查看器。全景图是一种广角图，标准的全景图是一张2：1的图像（在自己的VR全景项目中，采用的是 5376*2688 像素的 jpg 图片格式，平均每张图片大小为4M）。</p><p>全景图像类型可以是以下三种：</p><ul><li><p><strong>equirectangular</strong>。圆柱投影，使用最简单（在项目中使用的也是这种方式），只需在项目中设置 type 和 panarama 引入准备好的全景图片即可。（若想展示 通过手机相机拍摄的全景图，需要限制宽高比，或者通过 ps 进行处理）</p><p><img src="https://s2.loli.net/2021/12/15/FrznIxyYloj78uX.png" alt="image.png"></p></li><li><p><strong>cubemap</strong>。立方体投影，需要六个图像，顺序依次为前后左右上下。若想 将手机拍的普通照片进行VR展示，需要使用<strong>广角鱼眼镜头</strong>拍摄六个方向（前后左右上下）的图片，同时各图片间需要有一定的重合区域，以便“缝合”。<strong>优点</strong>：只需经过粗加工（例如裁切成正方形）就可以直接展示。</p></li><li><p><strong>multires</strong>。这是 Pannellum 独有的多分辨率格式，Pannellum 可以根据缩放的程度（改变Hfov）来显示不同分辨率的照片。该图片格式通过 Pannellum 中的 generate.py 程序转换而来（<code>python generate.py target.jpg</code>）。<strong>优点</strong>：优化加载场景的速度。</p></li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>从源码层面研究 pannellum 的全景实现原理。项目有两个 js 文件：<a href="https://github.com/mpetroff/pannellum/blob/master/src/js/pannellum.js">pannellum.js</a>、<a href="https://github.com/mpetroff/pannellum/blob/master/src/js/libpannellum.js">libpannellum.js</a>。</p><ul><li>pannellum.js 负责对整个页面进行处理。</li><li>libpannellum.js 负责为 pannellum 提供渲染对象，本质借用 WebGL 的 API。</li></ul><h3 id="pannellum-js"><a href="#pannellum-js" class="headerlink" title="pannellum.js"></a>pannellum.js</h3><ol><li><p>首先通过 js 创建各种 DOM 元素（如文字提示框、错误提示框、初始化的容器、版本框、加载框、缩放全屏控件、指南针等）并赋予 css 样式。</p></li><li><p><code>init</code> 函数：对 viewer 实例进行初始化</p><ul><li>图片初始化（最后将处理结果存进一个图片对象），然后判断类型：如果是 cubemap，会将6张图片放进一个数组；如果是 multires，会深拷贝对象，然后将得到高分辨率图片的 basePath 存进新对象；如果是equirectangular，就先判断是不是video，是则直接将 panorama 属性值（即路径）存进真实对象，否则新建一个 image 对象。</li><li>然后分别处理：如果是 cubemap，会当最后一张图片时调用 <code>onImageLoad</code> 函数；如果是 multires，直接调用 <code>onImageLoad</code> 函数；如果是 equirectangular，就会新建 xhr 请求对象，将得到的结果和图片路径传入 <code>parseGPanoXMP</code> 函数，在响应中得到并渲染当前加载的进度（期间设置请求头、跨域等）。</li></ul></li><li><p><code>onImageLoad</code> 函数：加载图像后创建渲染器并初始化事件侦听器（渲染器由 libpannellum 创建），对 DOM 元素绑定对应的鼠标、键盘和 touch 等事件。</p></li><li><p><code>mergeConfig</code> 函数：每次执行会创建新的 config，然后合并 default config 属性，再合并传入 initialConfig 的属性（该值为开发者在使用时自定义的 default 属性，用来对每个 pannellum 实例进行初始化），最后合并具体 sceneId 属性，从而使得实例属性完备。</p></li><li><p><code>parseGPanoXMP</code> 函数：使用 <a href="https://developers.google.com/streetview/spherical-metadata">Google 的全景 API</a>，解析 Google Photo Sphere XMP 元数据。使用 GPano XMP 数据设置查看器 viewer，将全景图片渲染成照片球，以便之后通过 libpannellum 的 <code>render</code> 函数实现类似 <a href="https://www.google.com/maps/@29.9925139,120.5852954,3a,90y,265.81h,81t/data=!3m8!1e1!3m6!1sAF1QipPWdhW_dMMVA-XPImSwjCfIqyGLjIvAjYLfhUP7!2e10!3e11!6shttps:%2F%2Flh5.googleusercontent.com%2Fp%2FAF1QipPWdhW_dMMVA-XPImSwjCfIqyGLjIvAjYLfhUP7%3Dw203-h100-k-no-pi-0-ya118.19268-ro-0-fo100!7i5376!8i2688?hl=zh-cn">Google 地图中的街景（VR）模式</a>。</p></li><li><p><code>mouseEventToCoords</code> 函数：根据鼠标当前的位置，通过复杂数学计算得到 panorama 的 pitch 和 yaw 值，从而实现全景中鼠标位置到俯仰角、水平方向角的转换。同样还有类似 <code>onDocumentMouseMove</code> 函数，用来处理鼠标移动事件。</p></li><li><p><code>animate</code> 函数：使用 <code>requestAnimationFrame</code> 触发 <code>render</code> 函数，从而渲染 panorama 图像。主要是对 pitch 和 yaw 的处理，通过调整偏航角度（yaw）来避免在左侧或右侧显示空白区域，然后还有一些边界条件的判断。渲染由 libpannellum.js 中的 <code>render</code> 函数完成。</p></li><li><p><code>renderInitCallback</code> 函数：渲染初始化完成时触发。处理之间的淡入淡出场景以及显示指南针和热点并隐藏加载展示。</p></li><li><p><code>Quaternion</code> 函数：处理 multires 格式的图像。在 Quaternion 函数原型上定义一个将四元数转换为欧拉角的函数。然后还有如 <code>computeQuaternion</code> 函数，将设备当前方向计算为四元数。</p></li><li><p><code>createHotSpot</code> 函数：为当前的场景创建热点（热点有url、video、image、changeScene等类型）。在点击热点跳转场景中，使用的就是 loadScene 事件<strong>（切换场景在做项目时困扰了我很久，当时如果想到看源码，很快就能解决了）</strong>。暴露出的可以自定义点击事件 <code>createTooltipFunc</code> 实现也很简单（得到 DOM 元素，然后将定义的参数再传入这个函数中）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (hs.createTooltipFunc) &#123;</span><br><span class="line">    hs.createTooltipFunc(div, hs.createTooltipArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>loadScene</code> 函数：接受sceneId, targetPitch, targetYaw, targetHfov等参数。在该函数中需要做以下事情：</p><ul><li>设置淡入淡出（如果之前指定）</li><li>销毁之前热点</li><li>创建新场景的 config（也是使用 <code>mergeConfig</code> 函数初始化 config）</li><li>通过 <code>processOptions</code> 重新配置页面参数</li><li>通过 <code>load</code> 加载页面</li></ul></li></ol><p>以上是我在阅读 pannellum.js 代码中整理的与渲染图像原理有关的一些函数，除此之外我发现作者做了<strong>大量的浏览器兼容</strong>，针对 IE 浏览器、IOS 等有不同的处理方式，也使用 <code>escapeHTML</code> 函数对 XSS 攻击做了<strong>防范</strong>；同时作者对<strong>垃圾回收</strong>也非常及时，在 <code>destroy</code> 函数中移除了所有之前注册的事件监听器。</p><h3 id="libpannellum-js"><a href="#libpannellum-js" class="headerlink" title="libpannellum.js"></a>libpannellum.js</h3><ol><li>首先渲染是通过创建 canvas，并添加到容器内实现的。对于拆分全景图片（cubemap、multires）渲染是<strong>基于 WebGL</strong> 的。</li><li><code>init</code> 函数：<ul><li>对 canvas 初始化：参数有 image（类型为Image、Array、Object，分别对应 equirectangular、cubemap、multires 格式图片）、haov（水平视角）、vaov（垂直视角），并定义了 WebGLRenderingContext 实例 gl，通过 <code>gl.bindBuffer</code> 方法绑定到目标。</li><li>对 cubemap 类型图片：遍历图片数组，判断各张图片是否规模相等，如果不是则报错进行提示<code>console.log(&#39;Cube faces have inconsistent widths: &#39; + cubeImgWidth + &#39; vs. &#39; + image[s].width)</code>，再对这6张图片进行“预处理”（用背景填充任何缺失的立方体贴图面）</li><li>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API">WebGL API</a> 进行渲染：<ul><li><code>gl.viewport</code> 设置视口</li><li><code>gl.createShader</code> 创建顶点着色器（vs）。</li><li><code>gl.shaderSource</code> 设置着色器。</li><li><code>gl.compileShader</code> 编译一个GLSL着色器，使其成为二进制数据，然后就可以被 WebGLProgram 对象所使用。（分段着色器 fs 同理）</li><li><code>gl.createProgram</code> 创建和初始化一个 WebGLProgra 对象，并将之前创建的着色器绑定到该对象身上，然后 <code>gl.useProgram</code> 使用该对象。</li><li><strong><code>gl.texImage2D</code> 设置二维图片</strong>（cubemap 类型图片需要指定特定的 target，凭此显示特定面数）</li><li><code>gl.linkProgram</code> 链接给定的 WebGLProgram，从而为程序的着色器准备进行 GPU 渲染。</li><li><code>gl.uniform[1234][fi][v]</code> 统一变量的新值。</li><li>etc.</li></ul></li><li>然后通过 <code>Canvas.getContext(&#39;2d&#39;)</code> 建立一个二维渲染上下文，进行图像的绘制。</li></ul></li><li><code>multiresNodeRenderSort</code> 函数：对多分辨率节点渲染进行排序（首先按照缩放程度，最小的最前，然后再根据图片位置距离视角中心，越近的越前）</li><li>对 multires 节点进行渲染：循环图片数组，通过 <code>gl.bufferData</code> 得到当前图片顶点、通过 <code>gl.bindTexture</code> 绑定当前图片的 texture 到页面 WebGL 上，然后通过 <code>gl.drawElements</code> 渲染图片。由于多分辨率节点在显示时会根据当前分辨率加载不同图像，因此需要通过 <code>testMultiresNode</code> 函数测试多分辨率节点是否可见：若是，则会加载它的 texture，并加载适当的子节点，以便之后渲染（在创建子节点过程中，也会对一些特殊情况如子节点数量不够等做处理）。</li><li><code>checkZoom</code> 函数：查找并应用最佳多分辨率缩放级别（level），是通过当前绘图缓冲区的实际宽度和图片最小瓦片（tile）的分辨率进行比较得到的。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于 equirectangular 类型的图片，pannellum 会先通过 Google 的全景 API 将全景图片渲染成照片球，然后在 libpannellum.js 中：通过 WebGL 的 <code>bindTexture</code> 和 <code>texImage2D</code> 等方式渲染成全景图。</li><li>对于 cubemap 类型的图片，会先将图片存进一个长度为 6 的数组，然后在 libpannellum.js 中：首先遍历图片数组，检查每张图片的宽高是否一样，只有一样才能进行后续渲染，否则报错以提示，然后会进行“预处理”，防止图片背景有缺漏，最后通过遍历图片数组，对每个图片进行 <code>texImage2D</code> 渲染显示。</li><li>对于 multires 类型的图片，会处理图片的真实路径（因为已经通过 python 将各个分辨率图片存进 multries 文件夹中），然后在 libpannellum.js 中：通过自定义的 <code>MultiresNode</code> 类型节点对每次更改分辨率后得到的最小单位的“瓦片”进行存储，然后利用 WebGL 的 <code>bindBuffer</code> 绑定不同缓冲区并初始化，通过 <code>getUniformLocation</code> 得到当前图像的点所处矩阵，在借助着色器绘图，最后将得到的 program 挂载到 gl 上，从而渲染成 VR 场景。</li></ul><h1 id="Three-js-实现"><a href="#Three-js-实现" class="headerlink" title="Three.js 实现"></a>Three.js 实现</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>先介绍一下 OpenGL、WebGL 和 Three.js：</p><ul><li><p>OpenGL：一套规范（不是接口），在支持 OpenGL 的机器上可以正常使用这些规范，并在显示器上看到绘制的结果。</p></li><li><p>WebGL：一种 3D 绘图标准，这种绘图技术标准把 JavaScript 和 OpenGL ES 2.0 结合在一起，通过 HTML5 的 Canvas 和 DOM 打交道，为HTML5 Canvas 提供硬件 3D 加速渲染。WebGL 技术标准免去了开发网页专用渲染插件的麻烦，可被用于创建具有复杂 3D 结构的网站页面，甚至可以用来设计 3D 网页游戏等。</p></li><li><p>Three.js：一款webGL框架，由于其易用性被广泛应用。Three.js 在 WebGL 的 api 接口基础上，又进行了一层封装。Three.js 以简单、直观的方式封装了 3D 图形编程中常用的对象，同时在开发中使用了很多图形引擎的高级技巧，极大提高了性能。</p></li></ul><p>对于初学者而言，WebGL 原生的 api 需要一些数学和图形学的相关技术，入门较难，而 Three.js 对 WebGL进行封装，简化了创建三维动画场景的过程（如微信小游戏“跳一跳”就是在Three.js的基础上开发的）。下面将介绍使用 Three.js 实现 VR 全景的思路和原理，并针对一些具体问题进行了分析。</p><h2 id="实现思路与原理"><a href="#实现思路与原理" class="headerlink" title="实现思路与原理"></a>实现思路与原理</h2><ol><li><p>渲染一个 3D 世界所必须的三要素是<strong>场景</strong>（scene）、<strong>相机</strong>（camera）和<strong>渲染器</strong>（renderer）。</p><ul><li><p><strong>场景</strong>：是一个三维空间，接下来需要往空间里放待呈现的物体和相机等。场景包含网格（mesh）和光源（light）：</p><ul><li>Mesh 模型是计算机的三维模型，普遍用三角形组成的网格来描述。Mesh 又由两个部分组成：材质（Material）+ 几何体（Geometry），常用的有漫反射、镜面反射两种材质，还可以引入外部图片，贴到物体表面，成为纹理贴图。在渲染全景时，我们通过创建一个立方体，然后将图片以正确的顺序（左右上下前后）贴到立方体表面，这样就得到了一个图片立方体。</li><li>Three.js 支持模拟不同光源，展现不同光照效果，有点光源、平行光、聚光灯等。对于VR全景，由于立方体贴图不受光影响，因此无需引入光源。</li></ul></li><li><p><strong>相机</strong>：用来确定位置、方向、角度，可视为我们的眼睛，面向场景取景。Three.js中的相机分为两类：透视相机和正交相机，原理都是将可视范围内的物体投影到一个平面。它们的区别：</p><ul><li><p><strong>透视相机</strong>的可视体是一个四锥体（类似于手电光投影到墙面，近大远小），多用于渲染 3D 场景</p></li><li><p><strong>正交相机</strong>的可视体是一个长方体（类似于平行光投影到墙面，大小保持不变），多用于渲染 2D 场景或者 UI 元素。</p><img src="https://s2.loli.net/2021/12/15/Zox1sCOk4LeVbuM.png" alt="image.png" style="zoom:80%;" /></li></ul></li><li><p><strong>渲染器</strong>：将相机拍摄的画面呈现在浏览器。Three.js 中有很多种类的渲染器，如 webGLRenderer、canvasRenderer、SVGRenderer，通常使用 webGL 渲染器。初始化时需要对渲染器的尺寸进行设置。</p></li></ul><img src="https://s2.loli.net/2021/12/15/xFbeM8Tz5yEu6Pw.png" alt="image.png" style="zoom:67%;" /></li><li><p>以上三要素完成了通过相机静态取景的功能，但若想实现动态浏览全景，必须使用<strong>镜头控制器</strong>（OrbitControls）调整相机的位置、方向和角度。执行构造函数 <code>THREE.OrbitControls()</code> 浏览器会同时干两件事：</p><ul><li>一是给浏览器定义了一个鼠标、键盘事件，自动检测鼠标键盘的变化，并按照一定算法转化为相机的旋转角度。</li><li>二是返回一个对象，给该对象添加监听事件，只要鼠标或键盘发生了变化，就触发渲染函数。当然，更好的做法是借助 <code>requestAnimationFrame()</code> 实现渲染器渲染方法 <code>render()</code> 的周期性调用，从而实现在移动鼠标过程中不断更新渲染视图，达到全景浏览的效果。</li></ul></li><li><p>此时我们就能看到一个自动旋转的 6 面都为图像的立方体。为了实现全景效果，我们要改变立方体的深度为 -1，使得我们的相对视野进入立方体内，处于立方体中心，由此实现全景浏览。</p></li></ol><h2 id="具体问题分析"><a href="#具体问题分析" class="headerlink" title="具体问题分析"></a>具体问题分析</h2><ol><li><p><strong>对图片的要求</strong></p><ul><li><p>大小：虽然此种方式采用立方体贴图实现全景渲染，但是图片不一定必须为正方形。当图片为矩形时， Three.js 会自动对图像进行处理，但这会严重影响渲染结果，因此图片最好为正方形。</p><p>当把顶部图片大小设置为 1024*256 像素，而其他图片格式都为 1024*1024 像素时，可以看到图片连接处有着明显的差异。<img src="https://s2.loli.net/2021/12/15/KL9xiUpaI63VuEw.png" alt="image.png"></p></li><li><p>分辨率：可以不相同，这只影响图片的清晰度。</p></li><li><p>格式：可以为 jpg 或 png。</p></li></ul></li><li><p><strong>图片的缝合原理</strong></p><p>Three.js 中采用右手坐标系对图片进行排列（posx、negx、posy、negy、posz、negz）：</p><p><img src="https://s2.loli.net/2021/12/15/EvzSiHdrTXMw7sf.png" alt="image.png"></p><p>体现在手机中，如右图所示：<img src="https://s2.loli.net/2021/12/15/teVwY5S2s4PB9om.png" alt="image.png" style="zoom: 67%;" /></p><p>立方体贴图就是将六张图片贴合到立方体的表面，如下图：<img src="https://s2.loli.net/2021/12/15/zWk5GsD67XIn9wR.png" alt="image.png"></p><p>当我们把图片以正确的顺序贴到立方体上时，呈现的就是一个正确的几何体：<img src="https://s2.loli.net/2021/12/15/rFYdwKkINs1jpaV.png" alt="image.png"></p><p>当相机进入该立方体内部，就能实现全景漫游的效果：<img src="https://s2.loli.net/2021/12/15/zGKS5sChYXjtIe7.png" alt="image.png"></p><p><strong>原理</strong>：在 <code>BoxGeometry</code> 类的构造函数中，对几何体的每一面通过 <code>buildPlane</code> 函数生成一个长宽相等的二维平面，利用 Vector3 对每一个平面的顶点、法线、紫外线（uvs）进行校正，从而实现连接处的贴合。默认返回一个立方体。</p></li><li><p><strong>交互事件如鼠标的平移、旋转、缩放</strong></p><p>浏览器检测到鼠标事件，会将鼠标平移的距离按照一定算法转化为相机的旋转角度，这样 Three.js 就会使用相机新的位置或角度数据进行渲染。<strong>在全景中一般不使用平移和缩放功能</strong>，因为全景浏览过程中，相机始终在立方体正中心，平移和缩放都会改变相机的位置，而旋转只是改变相机的角度。</p><ul><li><p>平移：在内部表示为 PAN。对鼠标按下、移动做了处理，主要是对 panStart、panDelta 和 panEnd 这三个二维向量做改变：</p><ul><li>按下：将当前点击位置的 x 坐标、y 坐标存进 panStart。</li><li>移动：用移动前后的两个向量差值乘以移动的速度，记为 panDelta ，然后通过 <code>pan</code> 函数得到 x 和 y 在坐标系中的具体偏移量，最后调用 <code>update</code> 方法更新相机视图。</li></ul></li><li><p>旋转：在内部表示为 ROTATE。与平移一样，对 rotateStart、rotateDelta 和 rotateEnd 这三个二维向量做改变：</p><ul><li><p>按下：将当前点击位置的 x 坐标、y 坐标存进 rotateStart。</p></li><li><p>移动：用移动前后的两个向量差值乘以移动的速度，记为 rotateDelta，但不同的是在这里需要获得当前 DOM 元素，然后通过 <code>rotateLeft</code> 和 <code>rotateUp</code> 函数，根据圆体公式传入旋转的角度（由2Πx、2Πy与当前元素的高度比值得到），从而改变当前视角的所在的真正角度，再调用 <code>update</code> 方法更新视图，实现旋转。公式可参考以下图：</p><img src="https://s2.loli.net/2021/12/15/jC4BKgOHMVXi3tb.png" alt="image.png" style="zoom:67%;" /></li></ul></li><li><p>缩放：在内部表示为 DOLLY。</p><ul><li>按下：将当前点击位置的 x 坐标、y 坐标存进 dollyStart。</li><li>移动：将移动前后的两个向量差值记为 dollyDelta ，然后根据 dollyDelta 判断当前缩放行为。如果放大，会调用 <code>dollyIn</code> 函数，将相机所能拍摄到的规模乘以传入的放大比例，否则进行相除以缩小规模。</li></ul></li></ul></li><li><p><strong>如何实现渲染</strong></p><p>通过 <code>render</code> 函数渲染。渲染器负责同时渲染场景以及相机。大致步骤如下：</p><ul><li>更新整个场景图（包括相机）：通过 <code>updateMatrixWorld</code> 函数更新每个物体的 matrix。这个函数还会对该物体的子节点遍历更新，每个物体的 matrix 是利用 <code>compose</code> 函数对 position、quaternion、scale 做矩阵计算得来的。</li><li>初始化渲染列表（renderList）：通过 <code>projectObject</code> 函数确定哪些对象要被渲染。<code>projectObject</code> 函数只会对可见的光照（light），精灵（sprite），网格（mesh），线条（line），点（point ）进行渲染，而且利用递归，保证场景中的每个可渲染的物体都能被正确渲染。</li><li>渲染物体（renderObject）：使用 <code>renderBufferDirect</code> 函数。在这个函数中，会设置 program（即WebGLProgram，在它的初始化中会获取顶点和片元着色器，构造最终用于进行渲染的 GLSL，并连接到 program），最后调用 <code>drawArrays</code> 函数，将先前创建的 geometry 以及 materials 渲染到 3D 场景的 canvas 中。</li></ul></li><li><p><strong>如何更新视图</strong></p><p>利用 <code>requestAnimationFrame()</code> 实时更新视图，在参数函数中调用 <code>render</code> 函数进行更新。</p><p>注意：requestAnimationFrame 不是立即调用函数，而是向浏览器发起一个执行某函数的请求， 什么时候执行由浏览器决定，一般默认保持 60FPS 的频率，即大约每 16.7ms 调用一次 <code>requestAnimationFrame()</code> 方法指定的函数。</p></li><li><p><strong>兼容性</strong></p><p>由于 Three.js 是WebGL3D 引擎，因此要考虑某些设备以及浏览器对 WebGL 的兼容性。可以使用 <a href="https://github.com/mrdoob/three.js/blob/master/examples/jsm/WebGL.js">Three.js 的 WebGL 插件</a>检验（<code>WEBGL.isWebGLAvailable()</code>），通过在 DOM 中创建 canvas 元素，判断是否创建成功，从而进行不同的响应。</p><p>支持 WebGL 的浏览器：Google Chrome 9+, Firefox 4+, Opera 15+, Safari 5.1+, Internet Explorer 11 and Microsoft Edge。对于不支持的浏览器，会回退到其他渲染器（CSS2DRenderer, CSS3DRenderer, SVGRenderer 等）</p></li><li><p><strong>加载渲染失败的处理</strong></p><p>在使用 <code>load</code> 函数加载图片，fetch 请求时若遇到错误，会调用 <code>LoadingManager</code> 的 <code>onError</code> 函数，传入对应的 url 并进行处理（体现在浏览器中即报错） </p></li></ol><h1 id="总结-amp-感悟"><a href="#总结-amp-感悟" class="headerlink" title="总结&amp;感悟"></a>总结&amp;感悟</h1><ul><li><p>通过对 pannellum 源码的阅读，印象最深的是<strong>代码非常规范</strong>，定义的每个函数都有相应的注释声明参数格式与作用、函数类型、函数功能、返回结果；代码的功能函数封装也非常完善，对于多次用到的代码块进行了封装；还有如<strong>编码风格</strong>等也值得我深入学习。</p></li><li><p>同时也知道该如何快速学习一门新的库或者框架：先阅读官方文档，对整体功能有一个大致认识，然后在项目实践过程中，遇到问题就从官方文档中或者仓库 issues 中找答案，如果仍找不到，不妨可以通过关键字阅读源码，了解它的具体实现逻辑。</p></li><li><p>感觉在这两天整理思路的过程中学到的东西 比 完成整个项目 还要多。之前自己仅仅是停留在库或者框架的 API 调用上，简单的利用它实现某个功能。但经过这两天的学习，我发现深入理解自己所使用的库对做项目有极大的帮助，不仅能直观看到这些库本质上是如何实现某些功能的，在遇到问题时也能第一时间从源码中寻找解决办法。</p></li></ul><ul><li><strong>使用 pannellum 和 Three.js 进行开发 VR 全景的感受</strong>：我认为 pannellum 更加的方便，因为它是一款专门针对全景图片的 Web 查看器，封装了相应的接口，这使得开发者很容易就能基于 pannellum 进行再次开发，如 @ali/rmpi-cube 就是基于 pannellum 开发的360全景容器组件；而 Three.js 则更为灵活和强大，用它进行开发虽然需要更多的步骤，但是发挥空间更高，能实现很多其他库实现不了的效果。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://threejs.org/docs/index.html#manual/en/introduction/Creating-a-scene">Three.js官方文档</a></p><p><a href="https://github.com/mrdoob/three.js/blob/master/build/three.module.js">three.module.js 地址</a></p><p><a href="https://github.com/mrdoob/three.js/blob/master/examples/jsm/controls/OrbitControls.js">OrbitControls.js 地址</a></p><p><a href="https://www.cxybb.com/article/fen747042796/55102837">全景虚拟漫游实现(three.js)</a></p><p><a href="https://juejin.cn/post/6844903815796228104#heading-10">ThreeJs学习笔记——渲染(render)分析</a></p><p><a href="https://blog.csdn.net/qq_30100043/article/details/82014971">Three.js和其它webgl框架</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;十分幸运，在微信一面面试官老师的指导下，我对自己&lt;a href=&quot;https://www.hitlcj.top/2</summary>
      
    
    
    
    <category term="持续输出" scheme="https://asura1211.github.io/categories/%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>【项目复盘】— — 贤得家社区商城</title>
    <link href="https://asura1211.github.io/2021/10/31/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98%E3%80%91%E2%80%94%20%E2%80%94%20%E8%B4%A4%E5%BE%97%E5%AE%B6%E7%A4%BE%E5%8C%BA%E5%95%86%E5%9F%8E/"/>
    <id>https://asura1211.github.io/2021/10/31/%E3%80%90%E9%A1%B9%E7%9B%AE%E5%A4%8D%E7%9B%98%E3%80%91%E2%80%94%20%E2%80%94%20%E8%B4%A4%E5%BE%97%E5%AE%B6%E7%A4%BE%E5%8C%BA%E5%95%86%E5%9F%8E/</id>
    <published>2021-10-31T15:01:17.000Z</published>
    <updated>2021-11-28T12:52:59.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h1><h2 id="一、商品详情页的渲染"><a href="#一、商品详情页的渲染" class="headerlink" title="一、商品详情页的渲染"></a>一、商品详情页的渲染</h2><p>后端返回的是一个装有图片的 html 文件，<a href="https://ecommunity.oss-cn-zhangjiakou.aliyuncs.com/product1623291740520.html%EF%BC%8C%E8%A6%81%E5%81%9A%E7%9A%84%E6%98%AF%E6%8A%8A">https://ecommunity.oss-cn-zhangjiakou.aliyuncs.com/product1623291740520.html，要做的是把</a> html 中的图片渲染进详情页。</p><p>想用 iframe 实现。</p><p>最后解决方案：</p><p>通过一个子组件 html-panel.vue，<strong>以 v-html 的方式渲染</strong>得到的数据，然后在父组件中加载子组件。</p><p>在子组件中，用 props 接收传入的 url ，然后 watch url 值，发生改变就调用 load 方法。在 load 方法中通过 axios 发送网络请求，将数据存入 html。</p><h2 id="二、分享"><a href="#二、分享" class="headerlink" title="二、分享"></a>二、分享</h2><p>不同环境的分享逻辑：<a href="https://de