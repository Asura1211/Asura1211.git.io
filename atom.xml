<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青山の博客</title>
  <icon>https://www.gravatar.com/avatar/d6b4ccc75d3b05793059f7fa33d47f22</icon>
  <subtitle>青山の博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-12T07:44:05.941Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>青山</name>
    <email>lvchangjing_hit@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【面试准备】— — 常见问题</title>
    <link href="http://example.com/2021/10/11/%E3%80%90%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E3%80%91%E2%80%94%20%E2%80%94%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2021/10/11/%E3%80%90%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E3%80%91%E2%80%94%20%E2%80%94%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2021-10-11T14:03:14.000Z</published>
    <updated>2021-10-12T07:44:05.941Z</updated>
    
    <content type="html"><![CDATA[<p>自我介绍</p><p>为什么选择前端</p><p>说说你在<a href="https://www.nowcoder.com/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE">项目</a>中担任什么角色。</p><p>现在前端的范围非常大，你觉得现在前端有哪几个方向，细说一下？</p><p>说一说自己的优缺点</p><p>说一说你最难的，最有亮点的个人项目</p><p>你是怎么学习前端的</p><p>如何学习新技术？</p><p>了解什么新的前端技术</p><p>个人博客的搭建过程</p><p>你自己的<a href="https://www.nowcoder.com/jump/super-jump/word?word=%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92">职业规划</a>？</p><p>学习、工作中碰到的难题</p><p>反问</p><p>团队部门技术栈</p><p>对我的提升自己的建议</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自我介绍&lt;/p&gt;
&lt;p&gt;为什么选择前端&lt;/p&gt;
&lt;p&gt;说说你在&lt;a href=&quot;https://www.nowcoder.com/jump/super-jump/word?word=%E9%A1%B9%E7%9B%AE&quot;&gt;项目&lt;/a&gt;中担任什么角色。&lt;/p&gt;
&lt;p&gt;现在前端</summary>
      
    
    
    
    <category term="面试准备" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    
    <category term="常见问题" scheme="http://example.com/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>【面试准备】— — 前端综合篇</title>
    <link href="http://example.com/2021/10/11/%E3%80%90%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E3%80%91%E2%80%94%20%E2%80%94%20%E7%BB%BC%E5%90%88%E7%AF%87/"/>
    <id>http://example.com/2021/10/11/%E3%80%90%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87%E3%80%91%E2%80%94%20%E2%80%94%20%E7%BB%BC%E5%90%88%E7%AF%87/</id>
    <published>2021-10-11T12:53:49.000Z</published>
    <updated>2021-10-12T10:37:54.059Z</updated>
    
    <content type="html"><![CDATA[<p>前端优化？</p><p>如果你写了一个页面，加载时页面空白，请你分析可能出现的问题？</p><p>给你一个异步函数 func(a, b) {return a+b}，实现一个函数func2(接收一个数组) {使用func得到所有数字的累加和 }，怎样实现最快？</p><p>快排(+时间复杂度)和<a href="https://www.nowcoder.com/jump/super-jump/word?word=%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8">反转链表</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前端优化？&lt;/p&gt;
&lt;p&gt;如果你写了一个页面，加载时页面空白，请你分析可能出现的问题？&lt;/p&gt;
&lt;p&gt;给你一个异步函数 func(a, b) {return a+b}，实现一个函数func2(接收一个数组) {使用func得到所有数字的累加和 }，怎样实现最快？&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="面试准备" scheme="http://example.com/categories/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    
    
    <category term="前端综合" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>【阅读笔记】— — 重学前端（极客时间）</title>
    <link href="http://example.com/2021/10/06/%E3%80%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%91%E2%80%94%20%E2%80%94%20%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF%EF%BC%88%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%EF%BC%89/"/>
    <id>http://example.com/2021/10/06/%E3%80%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E3%80%91%E2%80%94%20%E2%80%94%20%E9%87%8D%E5%AD%A6%E5%89%8D%E7%AB%AF%EF%BC%88%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%EF%BC%89/</id>
    <published>2021-10-06T20:49:27.000Z</published>
    <updated>2021-10-11T12:23:56.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>没有了超链接的 HTML，最多可以称为富文本，没法称作超文本（hyper text）。</p><p>链接是 HTML 中的一种机制，它是 HTML 文档和其它文档或者资源的连接关系，在 HTML 中，链接有两种类型。一种是超链接型标签，一种是外部资源链接。</p><p> a 标签、area 标签和 link 标签</p><h2 id="替换型元素"><a href="#替换型元素" class="headerlink" title="替换型元素"></a>替换型元素</h2><p>替换型元素是把文件的内容引入，替换掉自身位置的一类标签。凡是替换型元素，都是使用 src 属性来引用文件的。</p><p>script 标签、img 标签、video 标签</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="规则"><a href="#规则" class="headerlink" title="@规则"></a>@规则</h2><ul><li><p>@charset ：用于提示 CSS 文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p></li><li><p>@import ：用于引入一个 CSS 文件。</p></li><li><p>@media ：media query 使用的规则，它能够对设备的类型进行一些判断。</p></li><li><p>@page ：用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。</p></li><li><p>@counter-style ：产生一种数据，用于定义列表项的表现。</p></li><li><p>@keyframes ：产生一种数据，用于定义动画关键帧。</p></li><li><p>@fontface ：用于定义一种字体，icon font 技术就是利用这个特性来实现的。</p></li><li><p>@supports ：检查环境的特性，它与 media 比较类似。</p></li><li><p>@namespace ：用于跟 XML 命名空间配合的一个规则，表示内部的 CSS 选择器全都带上特定命名空间。</p></li><li><p>@ viewport：用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 html 的 meta 代替。</p></li></ul><h2 id="声明：属性和值"><a href="#声明：属性和值" class="headerlink" title="声明：属性和值"></a>声明：属性和值</h2><p>CSS 属性值可能是以下类型。</p><ul><li>CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li><li>字符串：比如 content 属性。</li><li>URL：使用 url() 函数的 URL 值。</li><li>整数 / 实数：比如 flex 属性。</li><li>维度：单位的整数 / 实数，比如 width 属性。</li><li>百分比：大部分维度都支持。</li><li>颜色：比如 background-color 属性。</li><li>图片：比如 background-image 属性。</li><li>2D 位置：比如 background-position 属性。</li><li>函数：来自函数的值，比如 transform 属性。</li></ul><p>CSS 支持一批特定的计算型函数：</p><ul><li><p>calc()：基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc() 函数允许不同单位混合运算，这非常的有用。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span>/<span class="number">3</span> - <span class="number">2</span>*<span class="number">1em</span> - <span class="number">2</span>*<span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>max()</p></li><li><p>min()</p></li><li><p>clamp()：给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</p></li><li><p>toggle()：在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现，可以使用下面代码：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123; <span class="attribute">list-style-type</span>: <span class="built_in">toggle</span>(circle, square); &#125;</span><br></pre></td></tr></table></figure></li><li><p>attr()：允许 CSS 接受属性值的控制。</p></li></ul><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>选择器连接方式的优先级：</p><ul><li>第一优先级<ul><li>无连接符号</li></ul></li><li>第二优先级<ul><li>“空格”。后代，表示选中所有符合条件的后代节点。</li><li>“~”。子代，表示选中符合条件的子节点。</li><li>“+”。直接后继，表示选中符合条件的直接后继节点，即 nextSlibling。</li><li>“&gt;”。后继，表示选中所有符合条件的后继节点。</li><li>“||”。列选择器，表示选中对应列中符合条件的单元格。</li></ul></li><li>第三优先级<ul><li>“,”</li></ul></li></ul><p>如 <code>.c,.a&gt;.b.d &#123;&#125;</code> 应该理解为这样的结构。</p><ul><li>.c,.a&gt;.b.d<ul><li>.c</li><li>.a&gt;.b.d<ul><li>.a</li><li>.b.d（表示选中的元素必须同时具有 b 和 d 两个 class）<ul><li>.b</li><li>.d</li></ul></li></ul></li></ul></li></ul><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><ul><li>::first-line。CSS 标准规定了 first-line 必须出现在最内层的块级元素之内。</li><li>::first-letter</li><li>::before。在元素内容之前插入一个虚拟的元素。这两个伪元素所在的 CSS 规则<strong>必须指定 content 属性</strong>才会生效。</li><li>::after</li></ul><h2 id="正常流"><a href="#正常流" class="headerlink" title="正常流"></a>正常流</h2><p>正常流的排版行为：依次排列，排不下了换行。</p><p>正常流的原理：在 CSS 标准中，规定了如何排布每一个文字或者盒的算法，这个算法依赖一个排版的“当前状态”，CSS 把这个当前状态称为“格式化上下文（formatting context）”。</p><p><strong>格式化上下文 + 盒 / 文字 = 位置</strong></p><p>需要排版的盒，是分为块级盒和行内级盒的，所以排版需要分别为它们规定了块级格式化上下文和行内级格式化上下文。当我们要把正常流中的一个盒或者文字排版，需要分成三种情况处理：</p><ul><li><strong>当遇到块级盒</strong>：排入块级格式化上下文。</li><li><strong>当遇到行内级盒或者文字</strong>：首先尝试排入行内级格式化上下文，如果排不下，那么创建一个行盒，先将行盒排版（行盒是块级，所以到第一种情况），行盒会创建一个行内级格式化上下文。</li><li><strong>遇到 float 盒</strong>：把盒的顶部跟当前行内级上下文上边缘对齐，然后根据 float 的方向把盒的对应边缘对到块级格式化上下文的边缘，之后重排当前行盒。</li></ul><p>但是页面中的布局没有那么简单，一些元素会在其内部创建新的块级格式化上下文，这些元素有：</p><ol><li>浮动元素；</li><li>绝对定位元素；</li><li>非块级但仍能包含块级元素的容器（如 inline-blocks, table-cells, table-captions）；</li><li>块级的能包含块级元素的容器，且属性 overflow 不为 visible。</li></ol><h2 id="Flex-排版"><a href="#Flex-排版" class="headerlink" title="Flex 排版"></a>Flex 排版</h2><p>具有 display:flex 的元素称为 flex 容器，它的子元素或者盒被称作 flex 项。flex 项如果有 flex 属性，会根据 flex 方向代替宽 / 高属性，形成“填补剩余尺寸”的特性。</p><p>Flex 延伸的方向称为“主轴”，把跟它垂直的方向称为“交叉轴”。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>Promise里的代码为什么比setTimeout先执行？</p><p>首先，一个 JavaScript 引擎会常驻于内存中，它等待着我们（宿主）把 JavaScript 代码或者函数传递给它执行。在 ES5 之后，JavaScript 引入了 Promise。把宿主发起的任务称为<strong>宏观任务</strong>，把 JavaScript 引擎发起的任务称为<strong>微观任务</strong>。</p><p>JavaScript 引擎等待宿主环境分配宏观任务，把这一部分称为事件循环。大概可以理解为：宏观任务的队列就相当于事件循环。在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列</p><p>实现 JS 引擎级和宿主级的任务时：Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API，则会添加宏观任务。</p><p>异步执行的顺序：</p><ul><li>首先我们分析有多少个宏任务；</li><li>在每个宏任务中，分析有多少个微任务；</li><li>根据调用次序，确定宏任务中的微任务执行次序；</li><li>根据宏任务的触发规则和调用次序，确定宏任务的执行次序；</li><li>确定整个顺序。</li></ul><h3 id="闭包和执行上下文"><a href="#闭包和执行上下文" class="headerlink" title="闭包和执行上下文"></a>闭包和执行上下文</h3><p>简单理解，闭包其实只是一个绑定了执行环境的函数。闭包包含两个部分：</p><ul><li>环境部分<ul><li>环境：函数的词法环境（执行上下文的一部分）</li><li>标识符列表：函数中用到的未声明的变量</li></ul></li><li>表达式部分：函数体</li></ul><p>JavaScript 标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。</p><p><strong>执行上下文在 ES3 中</strong>，包含三个部分。</p><ul><li>scope：作用域，也常常被叫做作用域链。</li><li>variable object：变量对象，用于存储变量的对象。</li><li>this value：this 值。</li></ul><p><strong>在 ES5 中</strong>：</p><ul><li>lexical environment：词法环境，当获取变量时使用。</li><li>variable environment：变量环境，当声明变量时使用。</li><li>this value：this 值。</li></ul><p><strong>在 ES2018 中</strong>，this 值被归入 lexical environment。</p><ul><li>lexical environment：词法环境，当获取变量或者 this 值时使用。</li><li>variable environment：变量环境，当声明变量时使用</li><li>code evaluation state：用于恢复代码执行位置。</li><li>Function：执行的任务是函数时使用，表示正在被执行的函数。</li><li>ScriptOrModule：执行的任务是脚本或者模块时使用，表示正在被执行的代码。</li><li>Realm：使用的基础库和内置对象实例。</li><li>Generator：仅生成器上下文有这个属性，表示当前生成器。</li></ul><p>会产生 let 使用的作用域：</p><ul><li>for；</li><li>if；</li><li>switch；</li><li>try/catch/finally。</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>1、普通函数：用 function 关键字定义的函数</p><p>2、箭头函数：用 =&gt; 运算符定义的函数</p><p>3、方法：在 class 中定义的函数</p><p>4、生成器函数：用 function * 定义的函数。</p><p>5、类：用 class 定义的类，实际上也是函数。</p><p>6、异步函数：普通函数、箭头函数和生成器函数加上 async 关键字。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>this 是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的 this 值也不同。</p><p>定义：<strong>调用函数时使用的引用，决定了函数执行时刻的 this 值。</strong></p><p>原理：<strong>我们获取函数的表达式，它实际上返回的并非函数本身，而是一个 Reference 类型。</strong>Reference 类型由两部分组成：一个对象和一个属性值。当做一些算术运算时，Reference 类型会被解引用，获取真正的值来参与运算，而类似函数调用、delete 等操作，都需要用到 Reference 类型中的对象。（如 Reference 类型中的对象被当作 this 值，传入了执行函数时的上下文）</p><p>但箭头函数不论用什么引用来调用它，都不影响它的 this 值。</p><p>JavaScript 标准定义了 [[thisMode]] 私有属性，它有三个取值：</p><p>[[thisMode]] 私有属性有三个取值。</p><ul><li>lexical：表示从上下文中找 this，对应箭头函数。</li><li>global：表示当 this 为 undefined 时，取全局对象，对应普通函数。</li><li>strict：当严格模式时使用，this 严格按照调用时传入的值，可能为 null 或者 undefined。</li></ul><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><p>try里面放return，finally还会执行吗？</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line"> </span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(foo()); </span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>finally 确实执行了，而且 return 语句也生效了，foo() 返回了结果 0。</p><p>如果在 finally 中加入 return 语句，这会覆盖 try 中的 return。</p><p><strong>这背后有一套机制在运作，这一机制的基础正是 JavaScript 语句执行的完成状态，我们用一个标准类型来表示：Completion Record。</strong>Completion Record 表示一个语句执行完之后的结果，它有三个字段：</p><ul><li>[[type]] 表示完成的类型，有 break continue return throw 和 normal 几种类型；</li><li>[[value]] 表示语句的返回值，如果语句没有，则是 empty；</li><li>[[target]] 表示语句的目标，通常是一个 JavaScript 标签。</li></ul><p>语句的分类：</p><p><img src="https://i.loli.net/2021/10/08/AcLRijXWtOCmvs6.png" alt="image.png"></p><p>1、普通的语句：不带控制能力的语句。普通语句执行后，会得到 [[type]] 为 normal 的 Completion Record，JavaScript 引擎遇到这样的 Completion Record，会继续执行下一条语句。这些语句中，只有表达式语句会产生 [[value]]。（Chrome 控制台显示的正是语句的 Completion Record 的 [[value]]。）</p><p>2、语句块：拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套。语句块内部语句的 Completion Record 的 [[type]] 如果不为 normal，会打断语句块后续的语句执行。</p><p>return 语句可能产生 return 或者 throw 类型的 Completion Record。下面是一个内部为普通语句的语句块：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 语句的 Completion Record([[type]] [[value]] [[target]]) 见注释</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>; <span class="comment">// normal, empty, empty</span></span><br><span class="line">  i ++; <span class="comment">// normal, 1, empty</span></span><br><span class="line">  <span class="built_in">console</span>.log(i) <span class="comment">//normal, undefined, empty</span></span><br><span class="line">&#125; <span class="comment">// normal, undefined, empty</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果加入 return </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">1</span>; <span class="comment">// normal, empty, empty</span></span><br><span class="line">  <span class="keyword">return</span> i; <span class="comment">// return, 1, empty</span></span><br><span class="line">  i ++; </span><br><span class="line">  <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125; <span class="comment">// return, 1, empty</span></span><br></pre></td></tr></table></figure><p>这个结构保证了非 normal 的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。</p><p>3、控制型语句：带有 if、switch 关键字，它们会对不同类型的 Completion Record 产生反应。</p><p>控制类语句分成两部分，一类是对其内部造成影响，如 if、switch、while/for、try。另一类是对外部造成影响如 break、continue、return、throw，这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效果。</p><p><img src="https://i.loli.net/2021/10/08/ogYhf6JDtXQE8bH.png" alt="image.png"></p><ul><li>消费指在这一层就执行了代码</li><li>穿透指去上一层的作用域或者控制语句找可以消费 break，continue 的执行环境</li></ul><p>4、带标签的语句：最后一个字段：target 涉及了 JavaScript 中的带标签的语句。任何 JavaScript 语句是可以加标签的，在语句前加冒号即可：<code>firstStatement: var i = 1;</code> 这个东西唯一有作用的时候是：与完成记录类型中的 target 相配合，用于跳出多层循环。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">outer: <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="attr">inner</span>: <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span> outer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;finished&quot;</span>)</span><br></pre></td></tr></table></figure><p>break/continue 语句如果后跟了关键字，会产生带 target 的完成记录。一旦完成记录带了 target，那么只有拥有对应 label 的循环语句会消费它。</p><h3 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h3><p><strong>为什么12.toString会报错？</strong></p><p>因为 JS里面的<code>. </code>是拥有两种含义的 一种是小数点 一种是方法调用。12.toString() 无法分辨是想要创建一个小数位为 toString() 的数，还是创建一个12 然后调用 toString()。</p><p>所以正常的写法是 <code>12..toString()</code></p><p>词法规定了语言的最小语义单元：token。JavaScript 源代码中的输入可以这样分类：</p><ul><li>WhiteSpace 空白字符</li><li>LineTerminator 换行符</li><li>Comment 注释</li><li>Token 词<ul><li>IdentifierName 标识符名称，典型案例是我们使用的变量名，注意这里关键字也包含在内了。</li><li>Punctuator 符号，我们使用的运算符和大括号等符号。</li><li>NumericLiteral 数字直接量，就是我们写的数字。</li><li>StringLiteral 字符串直接量，就是我们用单引号或者双引号引起来的直接量。</li><li>Template 字符串模板，用反引号 ` 括起来的直接量。</li></ul></li></ul><p>JavaScript 中的一些特别之处：</p><ol><li>除法和正则表达式冲突问题。JavaScript 不但支持除法运算符“ / ”和“ /= ”，还支持用斜杠括起来的正则表达式“ /abc/ ”。所以解决方案是定义两组词法，然后靠语法分析传一个标志给词法分析器，让它来决定使用哪一套词法。</li><li>字符串模板。理论上，“ ${ } ”内部可以放任何 JavaScript 表达式代码，而这些代码是以“ } ” 结尾的，也就是说，这部分词法不允许出现“ } ”运算符。</li></ol><h3 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h3><p>四个步骤：</p><ul><li>定义四则运算：产出四则运算的词法定义和语法定义。语法定义的核心思想为几种结构的组合产生一个新的结构。词法定义大概如下：<ul><li>Token<ul><li>Number: <code>1</code> <code>2</code> <code>3</code> <code>4</code> <code>5</code> <code>6</code> <code>7</code> <code>8</code> <code>9</code> <code>0</code> 的组合</li><li>Operator: <code>+</code> 、<code>-</code>、 <code>*</code>、 <code>/</code> 之一</li></ul></li><li>Whitespace: <code>&lt;sp&gt;</code></li><li>LineTerminator：<code>&lt;LF&gt; &lt;CR&gt;</code></li></ul></li><li>词法分析：把输入的字符串流变成 token。</li><li>语法分析：把 token 变成抽象语法树 AST。</li><li>解释执行：后序遍历 AST，执行得出结果。</li></ul><h2 id="不写分号需要注意的情况"><a href="#不写分号需要注意的情况" class="headerlink" title="不写分号需要注意的情况"></a>不写分号需要注意的情况</h2><ol><li><p>以括号开头的语句。这段代码看似两个独立执行的函数表达式，但是其实第三组括号被理解为传参，导致抛出错误。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)()  <span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li><li><p>以数组开头的语句。这段代码本意是一个变量 a 赋值，然后对一个数组执行 forEach，但是因为没有自动插入分号，被理解为下标运算符和逗号表达式，这个例子甚至不会抛出错误。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [[]]  <span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>].forEach(<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">console</span>.log(e))</span><br></pre></td></tr></table></figure></li><li><p>以正则表达式开头的语句。这段代码本意是声明三个变量，然后测试一个字符串中是否含有字母 a，但是因为没有自动插入分号，正则的第一个斜杠被理解成了除号，后面的意思就都变了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, g = &#123;<span class="attr">test</span>:<span class="function">()=&gt;</span><span class="number">0</span>&#125;, b = <span class="number">1</span>  <span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line">/(a)/g.test(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1)</span><br></pre></td></tr></table></figure></li><li><p>以 Template 开头的语句。这段代码本意是声明函数 f，然后赋值给 g，再测试 Template 中是否含有字母 a。但是因为没有自动插入分号，函数 f 被认为跟 Template 一体的，进而被莫名其妙地执行了一次。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = f  <span class="comment">/* 这里没有被自动插入分号 */</span></span><br><span class="line"><span class="string">`Template`</span>.match(<span class="regexp">/(a)/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$1)</span><br></pre></td></tr></table></figure></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="脚本和模块"><a href="#脚本和模块" class="headerlink" title="脚本和模块"></a>脚本和模块</h3><p>现代浏览器可以支持用 script 标签引入模块或者脚本。如果要引入模块，必须给 script 标签添加 type=“module”；如果引入脚本，则不需要 type。</p><p>脚本中可以包含语句。模块中可以包含三种内容：import 声明，export 声明和语句。</p><p><strong>import 声明：</strong></p><ol><li><p>直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p></li><li><p>带 from 的 import 意思是引入模块中的一部分信息，可以把它们变成本地的变量。有三种方法：</p><ul><li><code>import x from &quot;./a.js&quot;</code> 引入模块中导出的默认值。</li><li><code>import &#123;a as x, modify&#125; from &quot;./a.js&quot;;</code> 引入模块中的变量。</li><li><code>import * as x from &quot;./a.js&quot;</code> 把模块中所有的变量以类似对象属性的方式引入。</li></ul><p>语法要求不带 as 的默认值永远在最前。</p></li></ol><p><strong>export 声明：</strong></p><ol><li>独立使用 export 声明。</li><li>直接在声明型语句前添加 export 关键字：<ul><li>var、let、const</li><li>function (含 async 和 generator)</li><li>class</li></ul></li><li>跟 default 联合使用。export default 表示导出一个默认变量值，它可以用于 function 和 class。这里导出的变量是没有名称的，可以使用<code>import x from &quot;./a.js&quot;</code>这样的语法，在模块中引入。</li></ol><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 let 这些语句，以确定其中变量的意义。</p><ol><li><p><strong>var 声明</strong></p><ul><li>永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</li><li>var 的作用能够<strong>穿透一切语句结构</strong>，它只认脚本、模块和函数体三种语法结构。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">foo(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li><li><p><strong>function 声明</strong>。与 var 不同之处在于 function 声明不但在作用域中加入变量，还会给它赋值。</p></li><li><p><strong>class 声明</strong></p><ul><li>在 class 声明之前使用 class 名，会抛错。</li><li>class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</li><li>class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用</li></ul></li></ol><h3 id="指令序言机制"><a href="#指令序言机制" class="headerlink" title="指令序言机制"></a>指令序言机制</h3><p><code>&quot;use strict&quot;</code>是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是留给 JS 的引擎和实现者一些统一的表达方式，在静态扫描时指定 JS 代码的一些特性。</p><p>JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p><h3 id="表达式语句"><a href="#表达式语句" class="headerlink" title="表达式语句"></a>表达式语句</h3><p>由运算符连接变量或者直接量构成的表达式。</p><h1 id="综合应用"><a href="#综合应用" class="headerlink" title="综合应用"></a>综合应用</h1><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>性能问题最重要的几个点是：</p><ul><li>页面加载性能；!important</li><li>动画与操作性能；</li><li>内存、电量消耗。</li></ul><p><img src="https://i.loli.net/2021/10/11/yfdHPw4nNZrSWlB.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h</summary>
      
    
    
    
    <category term="阅读笔记" scheme="http://example.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>【知识整理】— — git 操作</title>
    <link href="http://example.com/2021/09/29/%E3%80%90%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E3%80%91%E2%80%94%20%E2%80%94%20git%20%E6%93%8D%E4%BD%9C/"/>
    <id>http://example.com/2021/09/29/%E3%80%90%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86%E3%80%91%E2%80%94%20%E2%80%94%20git%20%E6%93%8D%E4%BD%9C/</id>
    <published>2021-09-29T15:12:34.000Z</published>
    <updated>2021-10-08T13:00:47.440Z</updated>
    
    <content type="html"><![CDATA[<p>因为每次使用 git 操作都需要搜索一番，好多流程记不住顺序，就打算在这里记录一下使用 git 时的一些常用操作以及经常遇到的问题和解决方案吧~</p><h2 id="拉取项目"><a href="#拉取项目" class="headerlink" title="拉取项目"></a>拉取项目</h2><p>部分参考自<a href="https://blog.csdn.net/yuhan61659/article/details/81171351">博客</a></p><p>1、本地新建文件夹（最好为英文名）</p><p>2、通过 <code>git init</code> 生成 .git 文件</p><p>3、配置本地仓库的账号邮箱git：</p><p><code>$ git config --global user.name &quot;Your Name&quot;</code></p><p><code>$ git config --global user.email &quot;email@163.com&quot;</code></p><p>4、为了避免每次远程访问需要输密码，所以使用ssh登陆。ssh应该与本机信息绑定。查看自己电脑C:\Users\Administrator 目录下是否有 .ssh 文件夹。如果没有就需要生成：</p><p><code>$ ssh-keygen -t rsa -C &quot;email@163.com&quot;</code></p><p>ssh 在 Github 中备份后才能被验证。在 github 的 MyProfile 中，点击 Add Public Key</p><p>5、key 中的内容在 C:\Users\Administrator 里面的 .ssh文件夹，打开 id_rsa.pub，全部复制内容到 key</p><p>6、克隆项目：<code>$ git clone https://github.com/***.git</code></p><h2 id="创建仓库-amp-amp-上传代码"><a href="#创建仓库-amp-amp-上传代码" class="headerlink" title="创建仓库&amp;&amp;上传代码"></a>创建仓库&amp;&amp;上传代码</h2><p>1、单击 <strong>New repository</strong></p><p><img src="https://i.loli.net/2021/09/30/9YDmk2LhM7gcq4r.png" alt="image.png"></p><p>2、输入仓库名（英文），添加 Description（可选），设置仓库类型，选择 <strong>Initialize this repository with a README</strong>，点击 **Create repository **就可以了。</p><p>3、将自己写的代码添加到暂存区： <code>git add .</code></p><p>4、可以查看暂存区状态变化信息： <code>git status</code></p><p>5、将本地的代码关联到github上（如果是第一次上传代码）： <code>git remote add origin git@github.com:***.git</code></p><h2 id="更新本地代码到仓库"><a href="#更新本地代码到仓库" class="headerlink" title="更新本地代码到仓库"></a>更新本地代码到仓库</h2><p>1、将自己写的代码添加到暂存区： <code>git add .</code></p><p>2、可以查看暂存区状态变化信息： <code>git status</code></p><p>3、添加上传的注释（必须要有注释内容哦）： <code>git commit -m “上传的版本信息”</code></p><p>4、上传代码到 github 之前需要先 pull： <code>git pull origin main</code></p><p>5、上传代码到远程仓库： <code>git push -u origin main</code></p><p><strong>在 git push 时可能会出现下面的错误：</strong></p><p>fatal: unable to access ‘<a href="https://github.com/***.git/&#39;">https://github.com/***.git/&#39;</a>: OpenSSL SSL_read: Connection was reset, errno 10054</p><p>产生原因：一般是因为服务器的 SSL 证书没有经过第三方机构的签署，所以才报错</p><p>解决方法：<code>git config --global http.sslVerify &quot;false&quot;</code></p><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>博客：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</p><p>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</p><p>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</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为每次使用 git 操作都需要搜索一番，好多流程记不住顺序，就打算在这里记录一下使用 git 时的一些常用操作以及经常遇到的问题和解决方案吧~&lt;/p&gt;
&lt;h2 id=&quot;拉取项目&quot;&gt;&lt;a href=&quot;#拉取项目&quot; class=&quot;headerlink&quot; title=&quot;拉取项目</summary>
      
    
    
    
    <category term="知识整理" scheme="http://example.com/categories/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>【学习笔记】— — 字节青训营</title>
    <link href="http://example.com/2021/08/14/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E2%80%94%20%E2%80%94%20%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    <id>http://example.com/2021/08/14/%E3%80%90%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E3%80%91%E2%80%94%20%E2%80%94%20%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5/</id>
    <published>2021-08-14T15:04:54.000Z</published>
    <updated>2021-10-07T03:42:06.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="Case：写一段JS，控制网页实现切换深浅色两种浏览模式"><a href="#Case：写一段JS，控制网页实现切换深浅色两种浏览模式" class="headerlink" title="Case：写一段JS，控制网页实现切换深浅色两种浏览模式"></a>Case：写一段JS，控制网页实现切换深浅色两种浏览模式</h2><h3 id="方法一、JS改变DOM样式"><a href="#方法一、JS改变DOM样式" class="headerlink" title="方法一、JS改变DOM样式"></a>方法一、JS改变DOM样式</h3><p><a href="https://code.h5jun.com/fapaz/edit?js,output">https://code.h5jun.com/fapaz/edit?js,output</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;modeBtn&#x27;</span>);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="built_in">document</span>.body;</span><br><span class="line">  <span class="keyword">if</span>(body.className !== <span class="string">&#x27;night&#x27;</span>) &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;night&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    body.className = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="方法二、"><a href="#方法二、" class="headerlink" title="方法二、"></a>方法二、</h3><p>注意到这只是纯样式的改变，因此考虑只用CSS。<a href="https://code.h5jun.com/qofoz/edit?js,output">https://code.h5jun.com/qofoz/edit?js,output</a></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#modeCheckBox</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#modeCheckBox</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: black;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#modeBtn</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌞&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#modeCheckBox</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.content</span> <span class="selector-id">#modeBtn</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;🌜&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ul><li>HTML/CSS/JS各司其责 </li><li>应当避免不必要的由JS直接操作样式</li><li>可以用 class 来表示状态</li><li>纯展示类交互寻求零 JS 方案</li></ul><h2 id="Case：原生JS实现轮播图"><a href="#Case：原生JS实现轮播图" class="headerlink" title="Case：原生JS实现轮播图"></a>Case：原生JS实现轮播图</h2><p><strong>组件</strong>：Web 页面上抽出来一个个包含模板（HTML）、功能（JS）和样式（CSS）的单元。好的组件具备封装性、正确性、扩展性、复用性。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>API 设计应保证原子操作，职责单一，满足灵活性。<a href="https://code.h5jun.com/tifuf/edit?js,output">https://code.h5jun.com/tifuf/edit?js,output</a></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Slider</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.container = <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">    <span class="built_in">this</span>.items = <span class="built_in">this</span>.container</span><br><span class="line">    .querySelectorAll(<span class="string">&#x27;.slider-list__item, .slider-list__item--selected&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getSelectedItem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> selected = <span class="built_in">this</span>.container</span><br><span class="line">      .querySelector(<span class="string">&#x27;.slider-list__item--selected&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> selected</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getSelectedItemIndex</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">this</span>.items).indexOf(<span class="built_in">this</span>.getSelectedItem());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">slideTo</span>(<span class="params">idx</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> selected = <span class="built_in">this</span>.getSelectedItem();</span><br><span class="line">    <span class="keyword">if</span>(selected)&#123; </span><br><span class="line">      selected.className = <span class="string">&#x27;slider-list__item&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> item = <span class="built_in">this</span>.items[idx];</span><br><span class="line">    <span class="keyword">if</span>(item)&#123;</span><br><span class="line">      item.className = <span class="string">&#x27;slider-list__item--selected&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">slideNext</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> currentIdx = <span class="built_in">this</span>.getSelectedItemIndex();</span><br><span class="line">    <span class="keyword">const</span> nextIdx = (currentIdx + <span class="number">1</span>) % <span class="built_in">this</span>.items.length;</span><br><span class="line">    <span class="built_in">this</span>.slideTo(nextIdx);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">slidePrevious</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword"